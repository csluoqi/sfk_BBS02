<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd   
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
 
   
	<!-- 扫描的包 -->
	<!-- <context:component-scan base-package="app04"/> -->
    <!-- 使用转换器 -->
    <!--<mvc:annotation-driven conversion-service="conversionService"/>-->
    <!-- 使用格式化 -->
    <!-- conversionService2 -->
   <!--  <mvc:annotation-driven conversion-service="conversionService2"/> -->
   
    <!-- 使用注册器替代格式化 -->
    <!-- <mvc:annotation-driven />意思是开启使用注释的功能-->
    <!-- conversionService3是格式化或者转换器 -->
    <!-- <mvc:annotation-driven conversion-service="conversionService3"/> -->
   
    <!-- 扫描的包 -->
    <context:component-scan base-package="sfk.bbs"/>
    
     <aop:aspectj-autoproxy />   
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />
    
	<!-- 这个的作用是让DispatcherServlet不将下列路径理解为一个request请求,
    在项目中,这个是必须的,如果没有加这些就可能造成上述问题 -->
    <mvc:annotation-driven />
    <!-- <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/js/**" location="/js/"/> -->
    <mvc:resources mapping="/style/**" location="/style/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/*.html" location="/"/>
    
    <!-- 视图解析器 -->   
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!-- jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
     	<property name="dataSource" ref="dataSource"/>  
    </bean>
    
    <!-- 读取配置文件信息,在Spring的配置文件中使用EL表达式填充值 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 配置数据库连接池 -->
    <bean id="dataSourceLocal" name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
<!-- 指定连接数据库的驱动-->
<property name="driverClass" value="${jdbc.driverClassName}"/>
<!-- 指定连接数据库的URL-->
<property name="jdbcUrl" value="${jdbc.url}"/>
<!-- 指定连接数据库的用户名-->
<property name="user" value="${jdbc.username}"/>
<!-- 指定连接数据库的密码-->
<property name="password" value="${jdbc.password}"/>
<!-- 指定连接池中保留的最大连接数. Default:15-->
<property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
<!-- 指定连接池中保留的最小连接数-->
<property name="minPoolSize" value="${jdbc.minPoolSize}"/>
<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->
<property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->
<property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->
<!-- <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/> -->
<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。
但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->
<!-- <property name="maxStatements" value="${jdbc.maxStatements}"/> -->
<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
<!-- <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/> -->
</bean>
    
    
    
    <!-- <bean id="dataSourceLocal" name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    	制定连接数据库的驱动
    	<property name="driverClass" value="${jdbc.driverClassName}" />
    	制定连接数据库的URL
    	<property name="jdbcUrl" value="${jdbc.url}" />
    	指定连接数据库的用户名
    	<property name="user" value="${jdbc.username}" />
    	指定数据库的密码
    	<property name="password" value="${jdbc.password}"/>
    	指定连接池中保留的最大连接数 default:15
    	<property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
    	指定连接池中保留的最小连接数 
    	<property name="minPoolSize" value="${jdbc.minPoolSize}" />
    	指定连接池的初始化连接数 取值应在minPoolSize 与MaxPoolSize之间,Default:3
    	<property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
    	最大空闲时间,60秒内未使用连接被丢弃,若为0则永不丢弃,Default:0
    	<property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
    	当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. default: 3
    	<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
    	JDBC的标准,用以控制数据源内加载的prepareedStatement数量.但是由于预缓存的statements
    	属于单个connection而不是整个连接池所以色绘制这个参数需要考虑到多方面的因素,如果maxStatements
    	与maxStatementsPerConnection均为0,则缓存被关闭,Default:0 
    	<property name="maxStatements" value="${jdbc.maxStatements}"/>
    	每60秒检查所有连接池中的空闲连接default:0
    	<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
    </bean> -->
    <!-- 错误提示信息配置,用配置文件管理错误信息 -->
    <!-- <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    	<property name="basename" value="/WEB-INF/resource/messages" />
    </bean> -->
    <!-- org.springframework.context.support.ConversionServiceFactoryBean.class -->
    <!-- 使用转换器的bean -->
<!--     <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
	    <property name="converters">
	    	<list>
	    		<bean class="app06a.converter.StringToDateConverter" >
					<constructor-arg type="java.lang.String" value="MM-dd-yyyy"/>
	    		</bean>
	    	</list>
	    </property>
    </bean>
     -->
    <!-- 使用Formatter的格式化 -->
<!--     <bean id="conversionService2" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	    <property name="formatters">
	    	<set>
	    	
	    	/springMVC/src/app06a/formatter/DateFormatter.java
	    		<bean class="app06a.formatter.DateFormatter">
					<constructor-arg type="java.lang.String" value="MM-dd-yyyy"/>
	    		</bean>
	    	</set>
	    </property>
    </bean> -->
    
        <!-- 使用注册器替代Formatter的格式化 -->
<!--     <bean id="conversionService3" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	    <property name="formatterRegistrars">
	    	<set>
	    	/springMVC/src/app06a/formatter/DateFormatter.java
	    		<bean class="app06a.formatter.MyFormatterRigistrar">
					<constructor-arg type="java.lang.String" value="MM-dd-yyyy"/>
	    		</bean>
	    	</set>
	    </property>
    </bean> -->
    
    
</beans>